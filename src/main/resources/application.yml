server:
  port: 8081
spring:
  application:
    name: koolcard

  datasource:
    url: jdbc:mysql://localhost:3308/koolcard?createDatabaseIfNotExist=true
    username: root
    password:

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  security:
    oauth2:
      client:
        registration:
          demo:
            client-id: angular
#            client-secret: Kp1iXDq08wCxHYxxnKFGJA5f13qSHK6Z
            scope: openid, profile, email #Indique les informations auxquelles l'application souhaite acc�der apr�s l'authentification. Les scopes demand�s sont
            authorization-grant-type: client_credentials # Sp�cifie le type de flux OAuth2 utilis�. Ici, il s'agit de client_credentials
        provider: #Configure les d�tails sp�cifiques au fournisseur Keycloak.
          keycloak:
            # L'URI de l'�metteur. Ici, c'est l'URL du realm demo de Keycloak. Elle indique que toutes
            #les configurations (authentification, jetons, etc.) sont g�r�es dans ce realm.
            issuer-uri: http://localhost:8086/realms/master/

            # URL utilis�e pour obtenir des jetons d'acc�s OAuth2. Keycloak fournit un endpoint pour cela
            token-uri: http://localhost:8086/realms/master/protocol/openid-connect/token
            # Endpoint pour initier le processus d'authentification (souvent utilis� dans le flux Authorization Code).
            authorization-uri:  http://localhost:8086/realms/master/protocol/openid-connect/auth
            user-info-uri: http://localhost:8086/realms/master/protocol/openid-connect/userinfo
            # Endpoint pour r�cup�rer les cl�s publiques de Keycloak (utilis�es pour v�rifier la validit� des jetons).
            jwk-set-uri: http://localhost:8086/realms/master/protocol/openid-connect/certs

access:
  control:
    origin: http://localhost:4200

logging:
  level:
    org.springframework.security: trace
